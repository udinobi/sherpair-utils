<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!--

If you wish to turn off checking for a section of code, you can put a comment in the source
before and after the section, with the following syntax:

  // scalastyle:off
  ...  // stuff that breaks the styles
  // scalastyle:on

You can also disable only one rule, by specifying its rule id:

  // scalastyle:off no.finalize
  override def finalize(): Unit = ...
  // scalastyle:on no.finalize

This file is divided into 2 sections:
 (1) rules that we enforce.
 (2) rules that we don't want to enforce.
-->

<scalastyle>
  <name>Scalastyle standard configuration</name>

  <!-- ================================================================================ -->
  <!--                               rules we enforce                                   -->
  <!-- ================================================================================ -->

  <check level="warning" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxLineLength"><![CDATA[140]]></parameter>
      <parameter name="tabSize"><![CDATA[2]]></parameter>
      <parameter name="ignoreImports">true</parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.file.FileTabChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.file.HeaderMatchesChecker" enabled="true">
    <parameters>
      <parameter name="header"><![CDATA[/*
 * Copyright 2019 Sherpair Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.file.RegexChecker" enabled="true" customId="mutablesynchronizedbuffer">
    <parameters><parameter name="regex">mutable\.SynchronizedBuffer</parameter></parameters>
    <customMessage><![CDATA[
      Are you sure that you want to use mutable.SynchronizedBuffer? In most cases, you should use
      java.util.concurrent.ConcurrentLinkedQueue instead.
      If you must use mutable.SynchronizedBuffer, wrap the code block with
      // scalastyle:off mutablesynchronizedbuffer
      mutable.SynchronizedBuffer[...]
      // scalastyle:on mutablesynchronizedbuffer
    ]]></customMessage>
  </check>

  <check level="warning" class="org.scalastyle.file.RegexChecker" enabled="true" customId="NoScalaDoc">
    <parameters><parameter name="regex">(?m)^(\s*)/[*][*].*$(\r|)\n^\1  [*]</parameter></parameters>
    <customMessage>Use Javadoc style indentation for multiline comments</customMessage>
  </check>

  <check level="warning" class="org.scalastyle.file.RegexChecker" enabled="true" customId="OmitBracesInCase">
    <parameters><parameter name="regex">case[^\n>]*=>\s*\{</parameter></parameters>
    <customMessage>Omit braces in case clauses.</customMessage>
  </check>

  <check level="warning" class="org.scalastyle.file.RegexChecker" enabled="true" customId="SingleSpaceBetweenRParenAndLCurlyBrace">
    <parameters><parameter name="regex">\)\{</parameter></parameters>
    <customMessage><![CDATA[
      Single Space between ')' and `{`.
    ]]></customMessage>
  </check>

  <check level="warning" class="org.scalastyle.file.RegexChecker" enabled="true" customId="throwerror">
    <parameters><parameter name="regex">throw new \w+Error\(</parameter></parameters>
    <customMessage><![CDATA[
      Are you sure that you want to throw Error? In most cases, you should use appropriate Exception instead.
      If you must throw Error, wrap the code block with
      // scalastyle:off throwerror
      throw new XXXError(...)
      // scalastyle:on throwerror
    ]]></customMessage>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
    <parameters><parameter name="maximum"><![CDATA[10]]></parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.DisallowSpaceAfterTokenChecker" enabled="true">
    <parameters>
      <parameter name="tokens">LPAREN</parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">
    <parameters>
      <parameter name="tokens">COMMA, RPAREN</parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.EmptyClassChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
    <parameters>
      <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW, PIPE</parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
    <parameters>
      <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW, PIPE</parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.ForBraceChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
    <parameters>
      <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
      <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="true">
    <parameters>
      <parameter name="groups">java,scala,others</parameter>
      <parameter name="group.java">javax?\..+</parameter>
      <parameter name="group.scala">scala\..+</parameter>
      <parameter name="group.others">.+</parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="true">
    <parameters><parameter name="ignore">-1,0,1,2,3</parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>

  <check level="error" class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
    <parameters><parameter name="maxMethods"><![CDATA[30]]></parameter></parameters>
  </check>

  <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.OverrideJavaChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
    <parameters><parameter name="maxParameters"><![CDATA[8]]></parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.ProcedureDeclarationChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.VarFieldChecker" enabled="true"/>

  <check level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true" customId="commonslang2">
    <parameters><parameter name="regex">org\.apache\.commons\.lang\.</parameter></parameters>
    <customMessage>Use Commons Lang 3 classes (package org.apache.commons.lang3.*) instead
      of Commons Lang 2 (package org.apache.commons.lang.*)</customMessage>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true" customId="extractopt">
    <parameters><parameter name="regex">extractOpt</parameter></parameters>
    <customMessage>Use jsonOption(x).map(.extract[T]) instead of .extractOpt[T], as the latter is slower.</customMessage>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true" customId="javaconversions">
    <parameters><parameter name="regex">JavaConversions</parameter></parameters>
    <customMessage>Instead of importing implicits in scala.collection.JavaConversions._, import
      scala.collection.JavaConverters._ and use .asScala / .asJava methods</customMessage>
  </check>

  <!-- All println statements need to be wrapped in '// scalastyle:off/on println' -->
  <check level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true" customId="println">
    <parameters><parameter name="regex">^println$</parameter></parameters>
    <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with
      // scalastyle:off println
      println(...)
      // scalastyle:on println]]></customMessage>
  </check>

  <!-- ================================================================================ -->
  <!--                               rules we don't want                                -->
  <!-- ================================================================================ -->

  <check level="warning" class="org.scalastyle.file.FileLengthChecker" enabled="false">
    <parameters><parameter name="maxFileLength">800></parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"/>

  <check level="warning" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="false">
    <parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z0-9]*]]></parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="false">
    <parameters><parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="false">
    <parameters><parameter name="maxLength">50</parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="false">
    <parameters>
      <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.MultipleStringLiteralsChecker" enabled="false"/>

  <check level="warning" class="org.scalastyle.scalariform.NoCloneChecker" enabled="false"/>

  <check level="warning" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="false">
    <parameters><parameter name="maxTypes">30</parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="false">
    <parameters><parameter name="regex"><![CDATA[(config|[A-Z][A-Za-z0-9]*)]]></parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="false">
    <parameters><parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.ReturnChecker" enabled="false"/>

  <check level="warning" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="false"/>

</scalastyle>
